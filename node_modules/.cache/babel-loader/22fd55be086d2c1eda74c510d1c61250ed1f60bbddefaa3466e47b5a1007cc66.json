{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./btStyle.css';import'./Game.css';import{generateProblem}from'./problem';import{createTimer,utils}from'animejs';import{click}from'./sound';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Game=_ref=>{let{mode,operations,timeLimit,questionCount,maxDigits,onGameOver,onExit}=_ref;const[problem,setProblem]=useState({});const[userInput,setUserInput]=useState('');const[score,setScore]=useState(0);const[timeLeft,setTimeLeft]=useState(timeLimit);const[questionsAnswered,setQuestionsAnswered]=useState(0);const[timeUsed,setTimeUsed]=useState(0);const scoreRef=useRef(score);useEffect(()=>{scoreRef.current=score;},[score]);useEffect(()=>{setProblem(generateProblem(maxDigits,operations));const[$time]=utils.$('.time');let timerInstance;if(mode==='time'){timerInstance=createTimer({duration:timeLimit*1000,onComplete:()=>onGameOver(\"Your Score: \".concat(scoreRef.current)),onUpdate:self=>$time.innerHTML=self.currentTime,onUpdate:self=>setTimeLeft((timeLimit*1000-self.currentTime)/1000)});}else{timerInstance=createTimer({autoplay:true,onUpdate:self=>$time.innerHTML=self.currentTime,onUpdate:self=>setTimeUsed(self.currentTime/1000)});}return()=>{if(timerInstance&&typeof timerInstance.pause==='function'){timerInstance.pause();}};},[mode,onGameOver,timeLimit,maxDigits,operations]);const handleInputChange=e=>{setUserInput(e.target.value);if(parseFloat(e.target.value)===problem.a){setScore(prev=>prev+1);// Increment score\nsetQuestionsAnswered(prev=>prev+1);setProblem(generateProblem(maxDigits,operations));setUserInput('');}};useEffect(()=>{if(mode==='questions'&&questionsAnswered>=questionCount){onGameOver(\"Time Used: \".concat(timeUsed.toFixed(1)));}},[questionsAnswered,mode,questionCount,onGameOver,timeUsed]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"button\",{className:\"bt\",onClick:()=>{click();onExit();},style:{position:'absolute',top:10,right:10},children:[/*#__PURE__*/_jsx(\"span\",{class:\"shadow\"}),/*#__PURE__*/_jsx(\"span\",{class:\"depth\"}),/*#__PURE__*/_jsx(\"span\",{class:\"content\",children:\"Exit\"}),\"Exit\"]}),mode==='questions'&&/*#__PURE__*/_jsxs(\"div\",{className:\"timer-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Time Used:\"}),/*#__PURE__*/_jsxs(\"header\",{className:\"timer-header\",children:[timeUsed.toFixed(1),\"s\"]})]}),mode==='time'&&/*#__PURE__*/_jsxs(\"h2\",{children:[\"Score: \",score]}),/*#__PURE__*/_jsxs(\"div\",{className:\"problem-container\",children:[mode==='time'&&/*#__PURE__*/_jsxs(\"div\",{className:\"timer-container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Time Left:\"}),/*#__PURE__*/_jsxs(\"header\",{className:\"timer-header2\",children:[timeLeft.toFixed(1),\"s\"]})]}),mode==='questions'&&/*#__PURE__*/_jsxs(\"h3\",{children:[\"Questions Answered: \",questionsAnswered,\"/\",questionCount]}),/*#__PURE__*/_jsxs(\"div\",{className:\"qcontainer\",children:[/*#__PURE__*/_jsx(\"p1\",{children:problem.q}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",inputMode:\"numeric\",pattern:\"[0-9]*\",value:userInput,onChange:handleInputChange,autoFocus:true})]})]})]});};export default Game;","map":{"version":3,"names":["React","useState","useEffect","useRef","generateProblem","createTimer","utils","click","jsx","_jsx","jsxs","_jsxs","Game","_ref","mode","operations","timeLimit","questionCount","maxDigits","onGameOver","onExit","problem","setProblem","userInput","setUserInput","score","setScore","timeLeft","setTimeLeft","questionsAnswered","setQuestionsAnswered","timeUsed","setTimeUsed","scoreRef","current","$time","$","timerInstance","duration","onComplete","concat","onUpdate","self","innerHTML","currentTime","autoplay","pause","handleInputChange","e","target","value","parseFloat","a","prev","toFixed","children","className","onClick","style","position","top","right","class","q","type","inputMode","pattern","onChange","autoFocus"],"sources":["/Users/christalchen/Documents/coding/mathmania/src/Game.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './btStyle.css';\nimport './Game.css';\nimport { generateProblem } from './problem';\nimport { createTimer, utils } from 'animejs';\nimport { click } from './sound';\n\nconst Game = ({ mode, operations, timeLimit, questionCount, maxDigits, onGameOver, onExit }) => {\n    const [problem, setProblem] = useState({});\n    const [userInput, setUserInput] = useState('');\n    const [score, setScore] = useState(0);\n    const [timeLeft, setTimeLeft] = useState(timeLimit);\n    const [questionsAnswered, setQuestionsAnswered] = useState(0);\n    const [timeUsed, setTimeUsed] = useState(0);\n    const scoreRef = useRef(score);\n    useEffect(() => {\n        scoreRef.current = score;\n    }, [score]);\n\n    useEffect(() => {\n        setProblem(generateProblem(maxDigits, operations));\n\n        const [$time] = utils.$('.time');\n        let timerInstance;\n\n        if (mode === 'time') {\n            timerInstance = createTimer({\n                duration: timeLimit * 1000,\n                onComplete: () => onGameOver(`Your Score: ${scoreRef.current}`),\n                onUpdate: self => $time.innerHTML = self.currentTime,\n                onUpdate: self => setTimeLeft(((timeLimit * 1000 - self.currentTime) / 1000)),\n            });\n        } else {\n            timerInstance = createTimer({\n                autoplay: true,\n                onUpdate: self => $time.innerHTML = self.currentTime,\n                onUpdate: self => setTimeUsed(self.currentTime / 1000),\n            });\n        }\n\n        return () => {\n            if (timerInstance && typeof timerInstance.pause === 'function') {\n                timerInstance.pause();\n            }\n        };\n    }, [mode, onGameOver, timeLimit, maxDigits, operations]);\n\n    const handleInputChange = (e) => {\n        setUserInput(e.target.value);\n        if (parseFloat(e.target.value) === problem.a) {\n            setScore((prev) => prev + 1); // Increment score\n            setQuestionsAnswered((prev) => prev + 1);\n            setProblem(generateProblem(maxDigits, operations));\n            setUserInput('');\n        }\n    };\n\n    useEffect(() => {\n        if (mode === 'questions' && questionsAnswered >= questionCount) {\n            onGameOver(`Time Used: ${timeUsed.toFixed(1)}`);\n        }\n    }, [questionsAnswered, mode, questionCount, onGameOver, timeUsed]);\n\n    return (\n        <div>\n            <button className=\"bt\" onClick={() => { click(); onExit(); }} style={{ position: 'absolute', top: 10, right: 10 }}>\n                <span class=\"shadow\"></span>\n                <span class=\"depth\"></span>\n                <span class=\"content\">Exit</span>\n                Exit\n            </button>\n\n            {mode === 'questions' &&\n                <div className=\"timer-container\">\n                    <h2>Time Used:</h2>\n                    <header className=\"timer-header\">{timeUsed.toFixed(1)}s</header>\n                </div>\n            }\n            {mode === 'time' && <h2>Score: {score}</h2>}\n\n            <div className=\"problem-container\">\n\n                {mode === 'time' &&\n                    <div className=\"timer-container\">\n                        <h3>Time Left:</h3>\n                        <header className=\"timer-header2\">{timeLeft.toFixed(1)}s</header>\n                    </div>}\n                {mode === 'questions' && (<h3>Questions Answered: {questionsAnswered}/{questionCount}</h3>)}\n                <div className=\"qcontainer\">\n                    <p1>{problem.q}</p1>\n                    <input\n                        type=\"number\"\n                        inputMode=\"numeric\"\n                        pattern=\"[0-9]*\"\n                        value={userInput}\n                        onChange={handleInputChange}\n                        autoFocus\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}