{"ast":null,"code":"import React from'react';export function generateProblem(maxDigits,operations){const operators=[];if(operations.addition)operators.push('+');if(operations.subtraction)operators.push('-');if(operations.multiplication)operators.push('*');if(operations.multiplication)operators.push('/');const maxNum=Math.pow(10,maxDigits)-1;const operator=operators[Math.floor(Math.random()*operators.length)];const num1=Math.floor(Math.random()*maxNum)+1;const num2=Math.floor(Math.random()*maxNum)+1;let q;let a;if(operator==='/'){let divisor,dividend;do{divisor=Math.floor(Math.random()*maxNum)+1;dividend=divisor*(Math.floor(Math.random()*maxNum)+1);}while(dividend>maxNum||divisor>maxNum);q=\"\".concat(dividend,\" \").concat(operator,\" \").concat(divisor);a=dividend/divisor;}else{q=\"\".concat(num1,\" \").concat(operator,\" \").concat(num2);a=eval(q);}return{q,a};}","map":{"version":3,"names":["React","generateProblem","maxDigits","operations","operators","addition","push","subtraction","multiplication","maxNum","Math","pow","operator","floor","random","length","num1","num2","q","a","divisor","dividend","concat","eval"],"sources":["/Users/christalchen/Documents/coding/mathmania/src/problem.js"],"sourcesContent":["import React from 'react';\n\nexport function generateProblem(maxDigits, operations) {\n    const operators = [];\n    if (operations.addition) operators.push('+');\n    if (operations.subtraction) operators.push('-');\n    if (operations.multiplication) operators.push('*');\n    if (operations.multiplication) operators.push('/');\n\n    const maxNum = Math.pow(10, maxDigits) - 1;\n    const operator = operators[Math.floor(Math.random() * operators.length)];\n    const num1 = Math.floor(Math.random() * maxNum) + 1;\n    const num2 = Math.floor(Math.random() * maxNum) + 1;\n\n\n    let q;\n    let a;\n\n    if (operator === '/') {\n        let divisor, dividend;\n        do {\n            divisor = Math.floor(Math.random() * maxNum) + 1;\n            dividend = divisor * (Math.floor(Math.random() * maxNum) + 1);\n        } while (dividend > maxNum || divisor > maxNum);\n        q = `${dividend} ${operator} ${divisor}`;\n        a = dividend / divisor;\n    } else {\n        q = `${num1} ${operator} ${num2}`;\n        a = eval(q);\n    }\n\n    return {q, a};\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,MAAO,SAAS,CAAAC,eAAeA,CAACC,SAAS,CAAEC,UAAU,CAAE,CACnD,KAAM,CAAAC,SAAS,CAAG,EAAE,CACpB,GAAID,UAAU,CAACE,QAAQ,CAAED,SAAS,CAACE,IAAI,CAAC,GAAG,CAAC,CAC5C,GAAIH,UAAU,CAACI,WAAW,CAAEH,SAAS,CAACE,IAAI,CAAC,GAAG,CAAC,CAC/C,GAAIH,UAAU,CAACK,cAAc,CAAEJ,SAAS,CAACE,IAAI,CAAC,GAAG,CAAC,CAClD,GAAIH,UAAU,CAACK,cAAc,CAAEJ,SAAS,CAACE,IAAI,CAAC,GAAG,CAAC,CAElD,KAAM,CAAAG,MAAM,CAAGC,IAAI,CAACC,GAAG,CAAC,EAAE,CAAET,SAAS,CAAC,CAAG,CAAC,CAC1C,KAAM,CAAAU,QAAQ,CAAGR,SAAS,CAACM,IAAI,CAACG,KAAK,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC,CAAGV,SAAS,CAACW,MAAM,CAAC,CAAC,CACxE,KAAM,CAAAC,IAAI,CAAGN,IAAI,CAACG,KAAK,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC,CAAGL,MAAM,CAAC,CAAG,CAAC,CACnD,KAAM,CAAAQ,IAAI,CAAGP,IAAI,CAACG,KAAK,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC,CAAGL,MAAM,CAAC,CAAG,CAAC,CAGnD,GAAI,CAAAS,CAAC,CACL,GAAI,CAAAC,CAAC,CAEL,GAAIP,QAAQ,GAAK,GAAG,CAAE,CAClB,GAAI,CAAAQ,OAAO,CAAEC,QAAQ,CACrB,EAAG,CACCD,OAAO,CAAGV,IAAI,CAACG,KAAK,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC,CAAGL,MAAM,CAAC,CAAG,CAAC,CAChDY,QAAQ,CAAGD,OAAO,EAAIV,IAAI,CAACG,KAAK,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC,CAAGL,MAAM,CAAC,CAAG,CAAC,CAAC,CACjE,CAAC,MAAQY,QAAQ,CAAGZ,MAAM,EAAIW,OAAO,CAAGX,MAAM,EAC9CS,CAAC,IAAAI,MAAA,CAAMD,QAAQ,MAAAC,MAAA,CAAIV,QAAQ,MAAAU,MAAA,CAAIF,OAAO,CAAE,CACxCD,CAAC,CAAGE,QAAQ,CAAGD,OAAO,CAC1B,CAAC,IAAM,CACHF,CAAC,IAAAI,MAAA,CAAMN,IAAI,MAAAM,MAAA,CAAIV,QAAQ,MAAAU,MAAA,CAAIL,IAAI,CAAE,CACjCE,CAAC,CAAGI,IAAI,CAACL,CAAC,CAAC,CACf,CAEA,MAAO,CAACA,CAAC,CAAEC,CAAC,CAAC,CACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}