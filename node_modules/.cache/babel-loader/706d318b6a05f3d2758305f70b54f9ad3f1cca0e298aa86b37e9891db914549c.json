{"ast":null,"code":"import React from 'react';\nexport function generateProblem(maxDigits, operations) {\n  const operators = [];\n  if (operations.addition) operators.push('+');\n  if (operations.subtraction) operators.push('-');\n  if (operations.multiplication) operators.push('*');\n  if (operations.multiplication) operators.push('/');\n  const maxNum = Math.pow(10, maxDigits) - 1;\n  const operator = operators[Math.floor(Math.random() * operators.length)];\n  const num1 = Math.floor(Math.random() * maxNum) + 1;\n  const num2 = Math.floor(Math.random() * maxNum) + 1;\n  let q;\n  let a;\n  if (operator === '/') {\n    let divisor, dividend;\n    do {\n      divisor = Math.floor(Math.random() * maxNum) + 1;\n      dividend = divisor * (Math.floor(Math.random() * maxNum) + 1);\n    } while (dividend > maxNum || divisor > maxNum);\n    q = `${dividend} ${operator} ${divisor}`;\n    a = dividend / divisor;\n  } else {\n    q = `${num1} ${operator} ${num2}`;\n    a = eval(q);\n  }\n  return {\n    q,\n    a\n  };\n}","map":{"version":3,"names":["React","generateProblem","maxDigits","operations","operators","addition","push","subtraction","multiplication","maxNum","Math","pow","operator","floor","random","length","num1","num2","q","a","divisor","dividend","eval"],"sources":["/Users/christalchen/Documents/coding/mathmania/src/problem.js"],"sourcesContent":["import React from 'react';\n\n\nexport function generateProblem(maxDigits, operations) {\n    const operators = [];\n    if (operations.addition) operators.push('+');\n    if (operations.subtraction) operators.push('-');\n    if (operations.multiplication) operators.push('*');\n    if (operations.multiplication) operators.push('/');\n\n    const maxNum = Math.pow(10, maxDigits) - 1;\n    const operator = operators[Math.floor(Math.random() * operators.length)];\n    const num1 = Math.floor(Math.random() * maxNum) + 1;\n    const num2 = Math.floor(Math.random() * maxNum) + 1;\n\n\n    let q;\n    let a;\n\n    if (operator === '/') {\n        let divisor, dividend;\n        do {\n            divisor = Math.floor(Math.random() * maxNum) + 1;\n            dividend = divisor * (Math.floor(Math.random() * maxNum) + 1);\n        } while (dividend > maxNum || divisor > maxNum);\n        q = `${dividend} ${operator} ${divisor}`;\n        a = dividend / divisor;\n    } else {\n        q = `${num1} ${operator} ${num2}`;\n        a = eval(q);\n    }\n\n    return {q, a};\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,OAAO,SAASC,eAAeA,CAACC,SAAS,EAAEC,UAAU,EAAE;EACnD,MAAMC,SAAS,GAAG,EAAE;EACpB,IAAID,UAAU,CAACE,QAAQ,EAAED,SAAS,CAACE,IAAI,CAAC,GAAG,CAAC;EAC5C,IAAIH,UAAU,CAACI,WAAW,EAAEH,SAAS,CAACE,IAAI,CAAC,GAAG,CAAC;EAC/C,IAAIH,UAAU,CAACK,cAAc,EAAEJ,SAAS,CAACE,IAAI,CAAC,GAAG,CAAC;EAClD,IAAIH,UAAU,CAACK,cAAc,EAAEJ,SAAS,CAACE,IAAI,CAAC,GAAG,CAAC;EAElD,MAAMG,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAET,SAAS,CAAC,GAAG,CAAC;EAC1C,MAAMU,QAAQ,GAAGR,SAAS,CAACM,IAAI,CAACG,KAAK,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC,GAAGV,SAAS,CAACW,MAAM,CAAC,CAAC;EACxE,MAAMC,IAAI,GAAGN,IAAI,CAACG,KAAK,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC,GAAGL,MAAM,CAAC,GAAG,CAAC;EACnD,MAAMQ,IAAI,GAAGP,IAAI,CAACG,KAAK,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC,GAAGL,MAAM,CAAC,GAAG,CAAC;EAGnD,IAAIS,CAAC;EACL,IAAIC,CAAC;EAEL,IAAIP,QAAQ,KAAK,GAAG,EAAE;IAClB,IAAIQ,OAAO,EAAEC,QAAQ;IACrB,GAAG;MACCD,OAAO,GAAGV,IAAI,CAACG,KAAK,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC,GAAGL,MAAM,CAAC,GAAG,CAAC;MAChDY,QAAQ,GAAGD,OAAO,IAAIV,IAAI,CAACG,KAAK,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC,GAAGL,MAAM,CAAC,GAAG,CAAC,CAAC;IACjE,CAAC,QAAQY,QAAQ,GAAGZ,MAAM,IAAIW,OAAO,GAAGX,MAAM;IAC9CS,CAAC,GAAG,GAAGG,QAAQ,IAAIT,QAAQ,IAAIQ,OAAO,EAAE;IACxCD,CAAC,GAAGE,QAAQ,GAAGD,OAAO;EAC1B,CAAC,MAAM;IACHF,CAAC,GAAG,GAAGF,IAAI,IAAIJ,QAAQ,IAAIK,IAAI,EAAE;IACjCE,CAAC,GAAGG,IAAI,CAACJ,CAAC,CAAC;EACf;EAEA,OAAO;IAACA,CAAC;IAAEC;EAAC,CAAC;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}